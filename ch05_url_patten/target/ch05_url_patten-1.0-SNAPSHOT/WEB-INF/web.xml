<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
<!--    注册核心对象DispatcherServlet

在Tomcat服务器启动之后。创建 DispatcherServlet实例，因为在此创建DispatcherServlet实例
同时也会创建mvc容器对象，容器对象会读取springMVC的配置文件，把文件中的对象都创建好，
当用户发起请求时，就可以直接使用对象了


-->
    <!--    注册过滤器，解决post请求的乱码问题-->
    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>

        <!--        设置项目中使用的字符编码-->
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
        <!--        强制请求对象使用encoding编码-->
        <init-param>
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
        <!--        强制响应对象使用encoding编码-->
        <init-param>
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
<!--   自定义springmvc读取的 配置文件的位置     -->
        <init-param>
<!--           springmvc读取的配置文件的位置的属性 -->
            <param-name>contextConfigLocation</param-name>
<!--            指定自定义配置文件的位置-->
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>
<!--        在服务器 启动时就创建servlet对象

             它的值是一个整数，值越小，对象创建的时间越早
-->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
<!--        <url-pattern>/</url-pattern>
    "/"表示静态资源和未映射的请求都由这个default来处理

    当项目中使用了“/" 表示所有的资源都给DispatcherServlet处理，
    但是DispatcherServlet并没有处理静态资源的能力，
    所以对静态资源（html      图片    js）的访问都是404

    动态资源some.do是可以访问的，因为项目中的mycontroller控制器对象，能处理some.do请求

-->
<!--        第一种处理静态资源的方式
        原理是，加入这个标签后，框架会自动创建DefaultServletHttpRequestHandler对象
        （类似于手动创建mycontroller），它可以把接受的请求转发给tomcat的default

-->
    </servlet-mapping>

</web-app>